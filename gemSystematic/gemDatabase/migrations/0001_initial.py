# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-12-03 15:36
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
                ('account_capital', models.DecimalField(decimal_places=4, max_digits=15)),
                ('volatility_target', models.DecimalField(decimal_places=3, max_digits=4)),
            ],
            options={
                'db_table': 'accounts',
            },
        ),
        migrations.CreateModel(
            name='AccountGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'account_groups',
            },
        ),
        migrations.CreateModel(
            name='AssetLimit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('side', models.CharField(max_length=20)),
                ('value', models.DecimalField(decimal_places=10, max_digits=30, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Account')),
            ],
            options={
                'db_table': 'asset_limits',
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'currencies',
            },
        ),
        migrations.CreateModel(
            name='CurrencyPair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
                ('pip_size', models.DecimalField(decimal_places=8, max_digits=11)),
                ('bloomberg_code', models.CharField(max_length=20)),
                ('base_currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='base_currency', to='gemDatabase.Currency')),
            ],
            options={
                'db_table': 'currency_pairs',
            },
        ),
        migrations.CreateModel(
            name='DataFeed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
                ('bloomberg_code', models.CharField(max_length=20)),
                ('currency_pair', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.CurrencyPair')),
            ],
            options={
                'db_table': 'data_feeds',
            },
        ),
        migrations.CreateModel(
            name='DataPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('value', models.DecimalField(decimal_places=10, max_digits=30, null=True)),
            ],
            options={
                'db_table': 'data_points',
            },
        ),
        migrations.CreateModel(
            name='DataPointSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'data_point_sources',
            },
        ),
        migrations.CreateModel(
            name='DataPointType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'data_point_types',
            },
        ),
        migrations.CreateModel(
            name='Exchange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'exchanges',
            },
        ),
        migrations.CreateModel(
            name='Future',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
                ('bloomberg_code', models.CharField(max_length=20)),
                ('minimum_tick_size', models.DecimalField(decimal_places=5, max_digits=9)),
                ('contract_size', models.IntegerField()),
                ('point_value', models.DecimalField(decimal_places=2, max_digits=9)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Currency')),
                ('exchange', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Exchange')),
            ],
            options={
                'db_table': 'futures',
            },
        ),
        migrations.CreateModel(
            name='FutureContract',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('first_trade_date', models.DateField()),
                ('last_trade_date', models.DateField()),
                ('first_notice_date', models.DateField()),
                ('year', models.IntegerField()),
                ('bloomberg_code', models.CharField(max_length=20)),
                ('future', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Future')),
            ],
            options={
                'db_table': 'future_contracts',
            },
        ),
        migrations.CreateModel(
            name='FutureMonth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('future', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Future')),
            ],
            options={
                'db_table': 'future_months',
            },
        ),
        migrations.CreateModel(
            name='FxForward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
                ('contract_date', models.DateField()),
                ('currency_pair', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.CurrencyPair')),
            ],
            options={
                'db_table': 'fx_forwards',
            },
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'instruments',
            },
        ),
        migrations.CreateModel(
            name='InstrumentFamily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
                ('currency_pair', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.CurrencyPair')),
                ('future', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Future')),
            ],
            options={
                'db_table': 'instrument_families',
            },
        ),
        migrations.CreateModel(
            name='InstrumentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'instrument_types',
            },
        ),
        migrations.CreateModel(
            name='LimitType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'limit_types',
            },
        ),
        migrations.CreateModel(
            name='ModelLimit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('side', models.CharField(max_length=20)),
                ('value', models.DecimalField(decimal_places=10, max_digits=30, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Account')),
                ('limit_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.LimitType')),
            ],
            options={
                'db_table': 'model_limits',
            },
        ),
        migrations.CreateModel(
            name='Month',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
                ('month_code', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'months',
            },
        ),
        migrations.CreateModel(
            name='PortfolioGearing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=10, max_digits=30, null=True)),
                ('account_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.AccountGroup')),
            ],
            options={
                'db_table': 'portfolio_gearings',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'reports',
            },
        ),
        migrations.CreateModel(
            name='ReportItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ignored', models.BooleanField(default=False)),
                ('z_score', models.DecimalField(decimal_places=4, max_digits=8, null=True)),
                ('data_point', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.DataPoint')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Report')),
            ],
            options={
                'db_table': 'report_items',
            },
        ),
        migrations.CreateModel(
            name='ReportType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'report_types',
            },
        ),
        migrations.CreateModel(
            name='Rounding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=10, max_digits=30, null=True)),
                ('instrument_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.InstrumentType')),
            ],
            options={
                'db_table': 'roundings',
            },
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'sectors',
            },
        ),
        migrations.CreateModel(
            name='SectorLimit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('side', models.CharField(max_length=20)),
                ('value', models.DecimalField(decimal_places=10, max_digits=30, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Account')),
                ('limit_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.LimitType')),
                ('sector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Sector')),
            ],
            options={
                'db_table': 'sector_limits',
            },
        ),
        migrations.CreateModel(
            name='SettlementType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'settlement_types',
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
                ('bloomberg_code', models.CharField(max_length=20)),
                ('company', models.CharField(max_length=200)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Currency')),
                ('instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Instrument')),
            ],
            options={
                'db_table': 'stocks',
            },
        ),
        migrations.CreateModel(
            name='Strategy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'strategies',
            },
        ),
        migrations.CreateModel(
            name='StrategyGearing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=10, max_digits=30, null=True)),
                ('account_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.AccountGroup')),
                ('strategy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Strategy')),
            ],
            options={
                'db_table': 'strategy_gearings',
            },
        ),
        migrations.CreateModel(
            name='StrategyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'strategy_types',
            },
        ),
        migrations.CreateModel(
            name='StrategyTypeGearing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=10, max_digits=30, null=True)),
                ('account_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.AccountGroup')),
                ('strategy_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.StrategyType')),
            ],
            options={
                'db_table': 'strategy_type_gearings',
            },
        ),
        migrations.CreateModel(
            name='StrategyTypeWeight',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=10, max_digits=30, null=True)),
                ('account_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.AccountGroup')),
                ('strategy_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.StrategyType')),
            ],
            options={
                'db_table': 'strategy_type_weights',
            },
        ),
        migrations.CreateModel(
            name='StrategyWeight',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=10, max_digits=30, null=True)),
                ('account_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.AccountGroup')),
                ('strategy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Strategy')),
            ],
            options={
                'db_table': 'strategy_weights',
            },
        ),
        migrations.CreateModel(
            name='TargetInstrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Instrument')),
            ],
            options={
                'db_table': 'target_instruments',
            },
        ),
        migrations.CreateModel(
            name='TradingModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
                ('enabled', models.BooleanField(default=True)),
                ('strategy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Strategy')),
            ],
            options={
                'db_table': 'trading_models',
            },
        ),
        migrations.CreateModel(
            name='TradingModelFeed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_feed', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.DataFeed')),
                ('trading_model', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.TradingModel')),
            ],
            options={
                'db_table': 'trading_model_feeds',
            },
        ),
        migrations.CreateModel(
            name='TradingModelWeight',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=10, max_digits=30, null=True)),
                ('account_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.AccountGroup')),
                ('trading_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.TradingModel')),
            ],
            options={
                'db_table': 'trading_model_weights',
            },
        ),
        migrations.AddField(
            model_name='targetinstrument',
            name='trading_model',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.TradingModel'),
        ),
        migrations.AddField(
            model_name='strategy',
            name='strategy_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.StrategyType'),
        ),
        migrations.AddField(
            model_name='report',
            name='report_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.ReportType'),
        ),
        migrations.AddField(
            model_name='modellimit',
            name='trading_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.TradingModel'),
        ),
        migrations.AddField(
            model_name='instrumentfamily',
            name='sector',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Sector'),
        ),
        migrations.AddField(
            model_name='instrumentfamily',
            name='stock',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Stock'),
        ),
        migrations.AddField(
            model_name='instrument',
            name='instrument_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.InstrumentType'),
        ),
        migrations.AddField(
            model_name='fxforward',
            name='instrument',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Instrument'),
        ),
        migrations.AddField(
            model_name='fxforward',
            name='notional_currency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Currency'),
        ),
        migrations.AddField(
            model_name='futuremonth',
            name='month',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Month'),
        ),
        migrations.AddField(
            model_name='futurecontract',
            name='instrument',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Instrument'),
        ),
        migrations.AddField(
            model_name='futurecontract',
            name='month',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Month'),
        ),
        migrations.AddField(
            model_name='future',
            name='settlement_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.SettlementType'),
        ),
        migrations.AddField(
            model_name='datapoint',
            name='data_point_source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.DataPointSource'),
        ),
        migrations.AddField(
            model_name='datapoint',
            name='data_point_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.DataPointType'),
        ),
        migrations.AddField(
            model_name='datapoint',
            name='instrument',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Instrument'),
        ),
        migrations.AddField(
            model_name='datafeed',
            name='future',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Future'),
        ),
        migrations.AddField(
            model_name='datafeed',
            name='instrument',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Instrument'),
        ),
        migrations.AddField(
            model_name='currencypair',
            name='instrument',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.Instrument'),
        ),
        migrations.AddField(
            model_name='currencypair',
            name='quoted_currency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quoted_currency', to='gemDatabase.Currency'),
        ),
        migrations.AddField(
            model_name='assetlimit',
            name='instrument_family',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.InstrumentFamily'),
        ),
        migrations.AddField(
            model_name='assetlimit',
            name='limit_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.LimitType'),
        ),
        migrations.AddField(
            model_name='account',
            name='account_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemDatabase.AccountGroup'),
        ),
    ]
